# -*- coding: utf-8 -*-
"""grayscale.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xSFg095dAM2Nn2LWyaSZiwrWYKAzJ6nn
"""

import numpy as np
import cv2
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow


def grayscale(image: np.ndarray) -> np.ndarray:
    """Convert an RGB image to grayscale using DSP logic.

    Args:
        image (np.ndarray): RGB input image as a NumPy array.

    Returns:
        np.ndarray: Grayscale image (2D array).
    """
    # Separate the color channels
    r, g, b = image[:, :, 0], image[:, :, 1], image[:, :, 2]

    # Apply luminance formula using DSP standard weights
    grayscale_img = 0.2989 * r + 0.5870 * g + 0.1140 * b

    # Convert to 8-bit unsigned integer
    return grayscale_img.astype(np.uint8)

def load_and_convert_to_grayscale(image_path: str, save_output: bool = False) -> None:
    """Load an RGB image, convert to grayscale, and show or save the result.

    Args:
        image_path (str): Path to the RGB image file.
        save_output (bool): If True, saves the output as 'grayscale_output.png'.
    """
    # Read image using OpenCV (loads in BGR by default)
    bgr_image = cv2.imread(image_path)
    if bgr_image is None:
        print("Error: Could not load image.")
        return

    # Convert BGR to RGB
    rgb_image = cv2.cvtColor(bgr_image, cv2.COLOR_BGR2RGB)

    # Convert to grayscale using custom DSP logic
    gray = grayscale(rgb_image)

    # Show the grayscale image
    cv2_imshow( gray)


    # Optionally save the output
    if save_output:
        cv2.imwrite("grayscale_output.png", gray)

load_and_convert_to_grayscale("/content/Forza Horizon 5 Screenshot 2021.12.08 - 17.15.38.09.jpg", save_output=True)